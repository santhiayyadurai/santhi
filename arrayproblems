1) Burst Balloons problem 
description: first assume 4 arrow need for 4 set array then reducing the arrow if the set is compatible inside another set ex)(4,5) is fit within (3,9),(2,8),(1,6) 
output:1 arrow enough

CODE::
package java2;
public class burstballoon {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
                 burstballoon obj=new burstballoon();
                 obj.start();
	}
	public void start()
	{
		int[][] arr= { {3,9},{2,8},{1,6},{4,5}};
		int arrow=arr.length;
		System.out.println(arrow);																																																																																								
		
		int index=0;
		while(index<arr.length)
		{
		for(int i=0;i<arr.length;i++)
		{
			if(i!=index)
			{
				if(arr[index][0]>=arr[i][0] && arr[index][1]<=arr[i][1])
				{
					arrow--;
				}
			}
	 	}
		index++;
		}
		System.out.println(arrow);
	}

}




2)Two sum array
description: they give target and array as the input find out the two element which was equal to the target during addition.
output:3,5 & 4,4


CODE:
package java2;
import java.util.*;

public class twosumarray {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
	     twosumarray t=new twosumarray();
	     t.start();

	}
	public void start()
	{
		int[]arr= {3,2,5,4,4};
		int target=8;
		Map<Integer,Integer> m=new HashMap<>();
		for(int i=0;i<arr.length;i++)
		{
			int diff=target-arr[i];
			if(m.containsKey(diff))
			{
				System.out.println(arr[i]+" "+arr[m.get(diff)]);
			}
			m.put(arr[i], i);
			
		}
		
	}

}




3)Addone 
description: if the input is 134 we need to print 135 ,999 we need to print 1000
output:900

CODE:
package java2;

import java.util.Arrays;

public class addone {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
         int[] arr= {8,9,9};
         int i=arr.length-1;
         while(i>=0)
         {
        	 if(arr[i]!=9)
        	 {
        		 arr[i]=arr[i]+1;
        		 System.out.print(Arrays.toString(arr));
        		 return;
        	 }
        	 arr[i]=0;
        	 i--;
         }
         int[] res=new int[arr.length+1];
          res[0]=1;
         System.out.println(Arrays.toString(res));
         
	}

}

